swagger: '2.0'
info:
  title: Zonar Chopper API
  description: |
    Simple API to manage customer data
  version: "0.1"
  termsOfService: http://dummy/terms/
  contact:
    name: api@zonarsystems.com
  license:
    name: None
    url: None
host: arcane-dusk-5253.herokuapp.com
basePath: /api/1
schemes:
  - https
produces:
  - application/json
paths:
  /students:
    post:
      tags:
        - student
      summary: Add a new student to the school
      description: ""
      operationId: addStudent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Student object that needs to be added to the school
          required: false
          schema:
            $ref: "#/definitions/Student"
      responses:
        "405":
          description: Invalid input
      security:
        - studentschool_auth:
          - write_students
          - read_students
    put:
      tags:
        - student
      summary: Update an existing student
      description: ""
      operationId: updateStudent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Student object that needs to be added to the school
          required: false
          schema:
            $ref: "#/definitions/Student"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Student not found
        "400":
          description: Invalid ID supplied
      security:
        - studentschool_auth:
          - write_students
          - read_students
  /students/findByStatus:
    get:
      tags:
        - student
      summary: Finds Students by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findStudentsByStatus
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: Status values that need to be considered for filter
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Student"
        "400":
          description: Invalid status value
      security:
        - studentschool_auth:
          - write_students
          - read_students
  /students/findByTags:
    get:
      tags:
        - student
      summary: Finds Students by tags
      description: Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.
      operationId: findStudentsByTags
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: tags
          description: Tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Student"
        "400":
          description: Invalid tag value
      security:
        - studentschool_auth:
          - write_students
          - read_students
  /students/{studentId}:
    get:
      tags:
        - student
      summary: Find student by ID
      description: Returns a student when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
      operationId: getStudentById
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: studentId
          description: ID of student that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Student not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Student"
        "400":
          description: Invalid ID supplied
      security:
        - api_key: []
        - studentschool_auth:
          - write_students
          - read_students
    post:
      tags:
        - student
      summary: Updates a student in the school with form data
      description: ""
      operationId: updateStudentWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: studentId
          description: ID of student that needs to be updated
          required: true
          type: string
        - in: formData
          name: name
          description: Updated name of the student
          required: true
          type: string
        - in: formData
          name: status
          description: Updated status of the student
          required: true
          type: string
      responses:
        "405":
          description: Invalid input
      security:
        - studentschool_auth:
          - write_students
          - read_students
    delete:
      tags:
        - student
      summary: Deletes a student
      description: ""
      operationId: deleteStudent
      produces:
        - application/json
        - application/xml
      parameters:
        - in: header
          name: api_key
          description: ""
          required: true
          type: string
        - in: path
          name: studentId
          description: Student id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid student value
      security:
        - studentschool_auth:
          - write_students
          - read_students
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of user object
          required: false
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of user object
          required: false
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: username
          description: The user name for login
          required: false
          type: string
        - in: query
          name: password
          description: The password for login in clear text
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: name that need to be deleted
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid user supplied
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid username supplied
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
  studentschool_auth:
    type: oauth2
    authorizationUrl: http://chopper.zonarsystems.com/api/oauth/dialog
    flow: implicit
    scopes:
      write_students: modify students in your account
      read_students: read your students
definitions:
  User:
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      user_status:
        type: integer
        format: int32
  Student:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string

# params
# -name: transported
# -name: sif_refid
# -name: geo_street
# -name: emer_name1
# -name: guardian
# -name: aid_eligible
# -name: aide_  req
# -name: geo_county
# -name: emer_phone1_ext
# -name: last_name
# -name: picture
# -name: contact_notes
# -name: geo_confidence
# -name: xcoord
# -name: phone
# -name: emer_email2
# -name: mail_street2
# -name: emer_email1
# -name: mifromschl
# -name: emer_name2
# -name: exception_info
# -name: ycoord
# -name: mail_state
# -name: last_updated_  type
# -name: cohort
# -name: geo_zip
# -name: rec_  type
# -name: emer_phone2
# -name: mail_zip
# -name: emer_phone1
# -name: local_id
# -name: sex
# -name: tag_id
# -name: last_updated
# -name: grade
# -name: geo_city
# -name: last_updated_id
# -name: id
# -name: inactive
# -name: disabled
# -name: mi
# -name: mail_street1
# -name: phone_ext
# -name: dob
# -name: emer_phone2_ext
# -name: mail_city
# -name: last_updated_name
# -name: first_name
# -name: school_id
# -name: mail_country
# -name: comments
# -name: entry_date
